
using GLFW;
using PentaGE.Common;
using Serilog;
using System.Drawing;
using System.Numerics;
using System.Runtime.InteropServices;

namespace PentaGE.Core.Events
{
    /// <summary>
    /// The <c>EventManager</c> class provides a centralized event management system for handling various events generated by GLFW windows.
    /// It allows you to register event handlers for keyboard input, mouse input, window focus, window resizing, window iconification,
    /// GLFW error events, and more. The class efficiently organizes and dispatches events to the respective event handlers.
    /// </summary>
    /// <remarks>
    /// The <c>EventManager</c> class is designed as a singleton and should be accessed through the <c>Events</c> property of the concrete implementation class.
    /// It provides methods to add and remove event callbacks for GLFW windows, as well as updating the event queue.
    /// The event handling is categorized using the <c>EventCategory</c> enum, allowing selective logging and filtering of events.
    /// Events are raised as instances of the <c>EngineEventArgs</c> class, which is the base class for all event argument classes in this system.
    /// The event handlers are represented by delegate types and can be subscribed to using the various event properties of this class.
    /// </remarks>
    public sealed class EventManager
    {

        #region Fields and event handler delegates

        private readonly Dictionary<GLFW.Window, Window> _registeredWindows = new();
        private readonly List<EngineEventArgs> _eventBuffer = new();
        private readonly HotKeyManager _hotKeyManager = new();
        private readonly KeyBindingManager _keyBindingManager;

        private Point _lastPosition;

        // NOTE: We need to keep a reference to the callbacks to prevent them from
        //       being garbage collected and crash the engine during runtime.
        private KeyCallback _keyCallback;
        private MouseCallback _mousePositionCallback;
        private MouseButtonCallback _mouseButtonCallback;
        private MouseEnterCallback _mouseEnterCallback;
        private MouseCallback _mouseScrollCallback;
        private WindowCallback _windowClosingCallback;
        private FocusCallback _windowFocusCallback;
        private IconifyCallback _windowIconifyCallback;
        private WindowMaximizedCallback _windowMaximizeCallback;
        private SizeCallback _windowSizeCallback;
        private PositionCallback _windowPositionCallback;
        private ErrorCallback _glfwErrorCallback;

        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="EventManager"/> class. This constructor is marked as internal,
        /// limiting the creation of instances to within the class assembly, ensuring the <c>EventManager</c> is a singleton.
        /// The event manager is responsible for managing and dispatching events from GLFW windows.
        /// </summary>
        /// <remarks>
        /// The constructor is marked as internal to ensure that only one instance of the <c>EventManager</c> class exists
        /// within the assembly. Access to the event manager should be made through the <c>Events</c> property of the concrete implementation class,
        /// which provides access to the single instance of the class.
        /// </remarks>
        internal EventManager()
        {
            _keyBindingManager = new(this);
        }

        /// <summary>
        /// Gets or sets the category or categories of events to log.
        /// </summary>
        internal EventCategory CategoriesToLog { get; set; } = EventCategory.Keyboard;

        /// <summary>
        /// Gets or sets a value indicating whether to suspend event dispatching.
        /// </summary>
        internal bool SuspendEvents { get; set; } = false;

        /// <summary>
        /// Provides access to the <see cref="HotKeyManager"/> instance for managing hotkeys.
        /// </summary>
        public HotKeyManager HotKeys => _hotKeyManager;

        /// <summary>
        /// Provides access to the <see cref="KeyBindingManager"/> instance for managing keybindings.
        /// </summary>
        public KeyBindingManager KeyBindings => _keyBindingManager;

        #region Internal methods

        /// <summary>
        /// Adds event callbacks to the specified GLFW window to listen for keyboard input, mouse input, window events, and errors.
        /// </summary>
        /// <param name="window">The GLFW window to add event callbacks to.</param>
        /// <remarks>
        /// This method attaches event callbacks to the specified GLFW window to listen for various events, such as keyboard key presses and releases,
        /// mouse button presses and releases, mouse cursor movements, window focus changes, window iconification and restoration,
        /// window resizing, window closing, mouse scrolling, and GLFW error events.
        /// The event callbacks are added to the window's handle using GLFW's native Set*Callback functions.
        /// The EventManager will manage and dispatch events to the respective event handlers after being triggered by GLFW.
        /// </remarks>
        internal void AddCallbacks(Window window)
        {
            // We need to keep a reference to the callbacks to prevent them from being garbage collected.
            _keyCallback = KeyCallback;
            _mousePositionCallback = MousePositionCallback;
            _mouseButtonCallback = MouseButtonCallback;
            _mouseEnterCallback = MouseEnterCallback;
            _mouseScrollCallback = MouseScrollCallback;
            _windowClosingCallback = WindowClosingCallback;
            _windowFocusCallback = WindowFocusCallback;
            _windowIconifyCallback = WindowIconifyCallback;
            _windowMaximizeCallback = WindowMaximizeCallback;
            _windowSizeCallback = WindowSizeCallback;
            _windowPositionCallback = WindowPositionCallback;
            _glfwErrorCallback = ErrorCallback;

            // Add the callbacks to the window.
            Glfw.SetKeyCallback(window.Handle, _keyCallback);
            Glfw.SetCursorPositionCallback(window.Handle, _mousePositionCallback);
            Glfw.SetMouseButtonCallback(window.Handle, _mouseButtonCallback);
            Glfw.SetCursorEnterCallback(window.Handle, _mouseEnterCallback);
            Glfw.SetScrollCallback(window.Handle, _mouseScrollCallback);
            Glfw.SetCloseCallback(window.Handle, _windowClosingCallback);
            Glfw.SetWindowFocusCallback(window.Handle, _windowFocusCallback);
            Glfw.SetWindowIconifyCallback(window.Handle, _windowIconifyCallback);
            Glfw.SetWindowMaximizeCallback(window.Handle, _windowMaximizeCallback);
            Glfw.SetWindowSizeCallback(window.Handle, _windowSizeCallback);
            Glfw.SetWindowPositionCallback(window.Handle, _windowPositionCallback);
            Glfw.SetErrorCallback(_glfwErrorCallback);

            // Add the window to the registered windows dictionary.
            _registeredWindows.Add(window.Handle, window);
        }

        /// <summary>
        /// Removes the event callbacks from the specified GLFW window, stopping event listening for the window.
        /// </summary>
        /// <param name="window">The GLFW window to remove event callbacks from.</param>
        /// <remarks>
        /// This method detaches all event callbacks from the specified GLFW window, effectively stopping event listening for the window.
        /// The method removes the GLFW event callbacks previously added through the <c>AddCallbacks</c> method.
        /// After calling this method, the EventManager will no longer receive or dispatch events from the specified window.
        /// </remarks>
        internal void RemoveCallbacks(Window window)
        {
            if (!_registeredWindows.ContainsKey(window.Handle)) return;

            Glfw.SetKeyCallback(window.Handle, null!);
            Glfw.SetCursorPositionCallback(window.Handle, null!);
            Glfw.SetMouseButtonCallback(window.Handle, null!);
            Glfw.SetCursorEnterCallback(window.Handle, null!);
            Glfw.SetScrollCallback(window.Handle, null!);
            Glfw.SetCloseCallback(window.Handle, null!);
            Glfw.SetWindowFocusCallback(window.Handle, null!);
            Glfw.SetWindowIconifyCallback(window.Handle, null!);
            Glfw.SetWindowMaximizeCallback(window.Handle, null!);
            Glfw.SetWindowSizeCallback(window.Handle, null!);
            Glfw.SetWindowPositionCallback(window.Handle, null!);

            _registeredWindows.Remove(window.Handle);
        }

        /// <summary>
        /// Updates the event manager and processes the event buffer, dispatching events to the respective event handlers.
        /// </summary>
        /// <param name="pollEvents">Specifies whether to poll events from GLFW before processing the event buffer.</param>
        /// <remarks>
        /// This method updates the event manager, optionally polling events from GLFW using <paramref name="pollEvents"/> parameter.
        /// If <paramref name="pollEvents"/> is set to <c>true</c>, it calls <c>Glfw.PollEvents()</c> to process any pending events in GLFW's event queue.
        /// After polling events, it then processes the event buffer, which contains events generated by GLFW windows,
        /// and dispatches these events to the respective event handlers registered in the <c>EventManager</c> class.
        /// The event handlers are represented by delegate types and can be subscribed to using the various event properties of this class.
        /// </remarks>
        internal void Update(bool pollEvents = true)
        {
            // Optionally poll events from Glfw
            if (pollEvents) Glfw.PollEvents();

            // Execute the event buffer
            if (!SuspendEvents) ExecuteEvents();
        }

        #endregion

        #region Event declarations

        /// <summary>
        /// Occurs when a key is pressed down.
        /// </summary>
        public event EventHandler<KeyDownEventArgs>? KeyDown;

        /// <summary>
        /// Occurs when a key is held down, causing repeated key events.
        /// </summary>
        public event EventHandler<KeyDownEventArgs>? KeyRepeat;

        /// <summary>
        /// Occurs when a key is released after being pressed.
        /// </summary>
        public event EventHandler<KeyUpEventArgs>? KeyUp;

        /// <summary>
        /// Occurs when a mouse button is pressed down.
        /// </summary>
        public event EventHandler<MouseButtonEventArgs>? MouseDown;

        /// <summary>
        /// Occurs when a mouse button is released after being pressed.
        /// </summary>
        public event EventHandler<MouseButtonEventArgs>? MouseUp;

        /// <summary>
        /// Occurs when the mouse cursor is moved.
        /// </summary>
        public event EventHandler<MouseMovedEventArgs>? MouseMoved;

        /// <summary>
        /// Occurs when the mouse cursor enters a GLFW window.
        /// </summary>
        public event EventHandler<EmptyEventArgs>? MouseEntered;

        /// <summary>
        /// Occurs when the mouse cursor leaves a GLFW window.
        /// </summary>
        public event EventHandler<EmptyEventArgs>? MouseLeft;

        /// <summary>
        /// Occurs when the mouse wheel is scrolled.
        /// </summary>
        public event EventHandler<MouseScrolledEventArgs>? MouseScrolled;

        /// <summary>
        /// Occurs when a GLFW window is about to be closed.
        /// </summary>
        public event EventHandler<EmptyEventArgs>? WindowClosing;

        /// <summary>
        /// Occurs when a GLFW window gains focus.
        /// </summary>
        public event EventHandler<EmptyEventArgs>? WindowGotFocus;

        /// <summary>
        /// Occurs when a GLFW window loses focus.
        /// </summary>
        public event EventHandler<EmptyEventArgs>? WindowLostFocus;

        /// <summary>
        /// Occurs when a GLFW window is minimized (iconified).
        /// </summary>
        public event EventHandler<EmptyEventArgs>? WindowMinimized;

        /// <summary>
        /// Occurs when a GLFW window is maximized.
        /// </summary>
        public event EventHandler<EmptyEventArgs>? WindowMaximized;

        /// <summary>
        /// Occurs when a minimized or maximized GLFW window is restored.
        /// </summary>
        public event EventHandler<EmptyEventArgs>? WindowRestored;

        /// <summary>
        /// Occurs when a GLFW window is resized.
        /// </summary>
        public event EventHandler<WindowResizedEventArgs>? WindowResized;

        /// <summary>
        /// Occurs when a GLFW window is moved.
        /// </summary>
        public event EventHandler<WindowMovedEventArgs>? WindowMoved;

        /// <summary>
        /// Occurs when a GLFW error is generated.
        /// </summary>
        public event EventHandler<GlfwErrorEventArgs>? GlfwError;

        #endregion

        #region Event handlers

        /// <summary>
        /// Invokes the <see cref="KeyDown"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnKeyDown(EngineEventArgs e) => InvokeEvent(e, KeyDown);

        /// <summary>
        /// Invokes the <see cref="KeyRepeat"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnKeyRepeat(EngineEventArgs e) => InvokeEvent(e, KeyRepeat);

        /// <summary>
        /// Invokes the <see cref="KeyUp"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnKeyUp(EngineEventArgs e) => InvokeEvent(e, KeyUp);

        /// <summary>
        /// Invokes the <see cref="MouseDown"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnMouseDown(EngineEventArgs e) => InvokeEvent(e, MouseDown);

        /// <summary>
        /// Invokes the <see cref="MouseUp"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnMouseUp(EngineEventArgs e) => InvokeEvent(e, MouseUp);

        /// <summary>
        /// Invokes the <see cref="MouseMoved"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnMouseMoved(EngineEventArgs e) => InvokeEvent(e, MouseMoved);

        /// <summary>
        /// Invokes the <see cref="MouseEntered"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnMouseEntered(EngineEventArgs e) => InvokeEvent(e, MouseEntered);

        /// <summary>
        /// Invokes the <see cref="MouseLeft"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnMouseLeft(EngineEventArgs e) => InvokeEvent(e, MouseLeft);

        /// <summary>
        /// Invokes the <see cref="MouseScrolled"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnMouseScrolled(EngineEventArgs e) => InvokeEvent(e, MouseScrolled);

        /// <summary>
        /// Invokes the <see cref="WindowClosing"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnWindowClosing(EngineEventArgs e) => InvokeEvent(e, WindowClosing);

        /// <summary>
        /// Invokes the <see cref="WindowGotFocus"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnWindowGotFocus(EngineEventArgs e) => InvokeEvent(e, WindowGotFocus);

        /// <summary>
        /// Invokes the <see cref="WindowLostFocus"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnWindowLostFocus(EngineEventArgs e) => InvokeEvent(e, WindowLostFocus);

        /// <summary>
        /// Invokes the <see cref="WindowMinimized"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnWindowMinimized(EngineEventArgs e) => InvokeEvent(e, WindowMinimized);

        /// <summary>
        /// Invokes the <see cref="WindowMaximized"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnWindowMaximized(EngineEventArgs e) => InvokeEvent(e, WindowMaximized);

        /// <summary>
        /// Invokes the <see cref="WindowRestored"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnWindowRestored(EngineEventArgs e) => InvokeEvent(e, WindowRestored);

        /// <summary>
        /// Invokes the <see cref="WindowResized"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnWindowResized(EngineEventArgs e) => InvokeEvent(e, WindowResized);

        /// <summary>
        /// Invokes the <see cref="WindowMoved"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnWindowMoved(EngineEventArgs e) => InvokeEvent(e, WindowMoved);

        /// <summary>
        /// Invokes the <see cref="GlfwError"/> event with the specified <see cref="EngineEventArgs"/>.
        /// </summary>
        /// <param name="e">The <see cref="EngineEventArgs"/> containing event data.</param>
        private void OnGlfwError(EngineEventArgs e) => InvokeEvent(e, GlfwError);

        #endregion

        #region Callbacks

        /// <summary>
        /// Callback method for handling keyboard input events from GLFW.
        /// This method is called by GLFW when a keyboard key is pressed, released, or repeated.
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the input.</param>
        /// <param name="key">The key that was pressed or released.</param>
        /// <param name="scancode">The platform-specific scancode of the key.</param>
        /// <param name="state">The state of the key (pressed, released, or repeated).</param>
        /// <param name="mods">The modifier keys (Shift, Control, Alt, Super) that were pressed.</param>
        private void KeyCallback(GLFW.Window windowHandle, Keys key, int scancode, InputState state, ModifierKeys mods)
        {
            if (state == InputState.Press)
            {
                _eventBuffer.Add(new KeyDownEventArgs(
                    OnKeyDown,
                    GetWindow(windowHandle),
                    (Key)key,
                    (ModifierKey)mods,
                    false));

                // Update the HotKeyManager
                _hotKeyManager.KeyPressed((Key)key, (ModifierKey)mods, GetWindow(windowHandle));
            }
            else if (state == InputState.Release)
            {
                _eventBuffer.Add(new KeyUpEventArgs(OnKeyUp,
                    GetWindow(windowHandle),
                    (Key)key,
                    (ModifierKey)mods));
            }
            else if (state == InputState.Repeat)
            {
                _eventBuffer.Add(new KeyDownEventArgs(OnKeyRepeat,
                    GetWindow(windowHandle),
                    (Key)key,
                    (ModifierKey)mods,
                    true));
            }
        }

        /// <summary>
        /// Callback method for handling mouse button input events from GLFW.
        /// This method is called by GLFW when a mouse button is pressed or released.
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the input.</param>
        /// <param name="button">The mouse button that was pressed or released.</param>
        /// <param name="state">The state of the mouse button (pressed or released).</param>
        /// <param name="mods">The modifier keys (Shift, Control, Alt, Super) that were pressed.</param>
        private void MouseButtonCallback(GLFW.Window windowHandle, GLFW.MouseButton button, InputState state, ModifierKeys mods)
        {
            if (state == InputState.Press)
            {
                _eventBuffer.Add(new MouseButtonEventArgs(
                    OnMouseDown,
                    GetWindow(windowHandle),
                    (Common.MouseButton)button,
                    (ModifierKey)mods,
                    _lastPosition,
                    EventCategory.Input | EventCategory.Mouse | EventCategory.Button,
                    EventType.MouseButtonDown));
            }
            else if (state == InputState.Release)
            {
                _eventBuffer.Add(new MouseButtonEventArgs(
                    OnMouseUp,
                    GetWindow(windowHandle),
                    (Common.MouseButton)button,
                    (ModifierKey)mods,
                    _lastPosition,
                    EventCategory.Input | EventCategory.Mouse | EventCategory.Button,
                    EventType.MouseButtonUp));
            }
        }

        /// <summary>
        /// Callback method for handling mouse position input events from GLFW.
        /// This method is called by GLFW when the mouse cursor position changes.
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the input.</param>
        /// <param name="xPos">The new cursor x-coordinate, relative to the left edge of the client area.</param>
        /// <param name="yPos">The new cursor y-coordinate, relative to the top edge of the client area.</param>
        private void MousePositionCallback(GLFW.Window windowHandle, double xPos, double yPos)
        {
            // Store the last position of the cursor for use in other events
            _lastPosition = new((int)xPos, (int)yPos);

            _eventBuffer.Add(new MouseMovedEventArgs(
                    OnMouseMoved,
                    GetWindow(windowHandle),
                    new((int)xPos, (int)yPos)));
        }

        /// <summary>
        /// Callback method for handling mouse enter/leave input events from GLFW.
        /// This method is called by GLFW when the mouse cursor enters or leaves a window's client area.
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the input.</param>
        /// <param name="entered">A boolean value indicating whether the cursor entered or left the window.</param>
        private void MouseEnterCallback(GLFW.Window windowHandle, bool entered)
        {
            if (entered)
            {
                _eventBuffer.Add(new EmptyEventArgs(
                    OnMouseEntered,
                    GetWindow(windowHandle),
                    EventCategory.Input | EventCategory.Mouse | EventCategory.Hover,
                    EventType.MouseEntered));
            }
            else
            {
                _eventBuffer.Add(new EmptyEventArgs(
                    OnMouseLeft,
                    GetWindow(windowHandle),
                    EventCategory.Input | EventCategory.Mouse | EventCategory.Hover,
                    EventType.MouseLeft));
            }
        }

        /// <summary>
        /// Callback method for handling mouse scroll input events from GLFW.
        /// This method is called by GLFW when the user scrolls the mouse wheel.
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the input.</param>
        /// <param name="xOffset">The horizontal scroll offset. Positive values indicate right-scroll, negative values indicate left-scroll.</param>
        /// <param name="yOffset">The vertical scroll offset. Positive values indicate up-scroll, negative values indicate down-scroll.</param>
        private void MouseScrollCallback(GLFW.Window windowHandle, double xOffset, double yOffset) =>
            _eventBuffer.Add(new MouseScrolledEventArgs(
                OnMouseScrolled,
                GetWindow(windowHandle),
                new Vector2((float)xOffset, (float)yOffset)));

        /// <summary>
        /// Callback method for handling window closing events from GLFW.
        /// This method is called by GLFW when a window is requested to close (e.g., by clicking the close button).
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the event.</param>
        private void WindowClosingCallback(GLFW.Window windowHandle) =>
            _eventBuffer.Add(new EmptyEventArgs(
                OnWindowClosing,
                GetWindow(windowHandle),
                EventCategory.Window | EventCategory.Closing,
                EventType.WindowClosing));

        /// <summary>
        /// Callback method for handling window focus events from GLFW.
        /// This method is called by GLFW when a window gains or loses focus.
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the event.</param>
        /// <param name="focused">A boolean indicating whether the window is focused (true) or lost focus (false).</param>
        private void WindowFocusCallback(GLFW.Window windowHandle, bool focused)
        {
            if (focused)
            {
                _eventBuffer.Add(new EmptyEventArgs(
                    OnWindowGotFocus,
                    GetWindow(windowHandle),
                    EventCategory.Window | EventCategory.Focus,
                    EventType.WindowGotFocus));
            }
            else
            {
                _eventBuffer.Add(new EmptyEventArgs(
                    OnWindowLostFocus,
                    GetWindow(windowHandle),
                    EventCategory.Window | EventCategory.Focus,
                    EventType.WindowLostFocus));
            }
        }

        /// <summary>
        /// Callback method for handling window iconify events from GLFW.
        /// This method is called by GLFW when a window is minimized or restored (unminimized).
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the event.</param>
        /// <param name="focusing">A boolean indicating whether the window is being minimized (true) or restored (false).</param>
        private void WindowIconifyCallback(IntPtr windowHandle, bool focusing)
        {
            if (focusing)
            {
                _eventBuffer.Add(new EmptyEventArgs(
                    OnWindowMinimized,
                    GetWindow(windowHandle),
                    EventCategory.Window | EventCategory.Iconify,
                    EventType.WindowMinimized));
            }
            else
            {
                _eventBuffer.Add(new EmptyEventArgs(
                    OnWindowRestored,
                    GetWindow(windowHandle),
                    EventCategory.Window | EventCategory.Iconify,
                    EventType.WindowRestored));
            }
        }

        /// <summary>
        /// Callback method for handling window maximize events from GLFW.
        /// This method is called by GLFW when a window is maximized or restored (unmaximized).
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the event.</param>
        /// <param name="maximizing">A boolean indicating whether the window is being maximized (true) or restored (false).</param>
        private void WindowMaximizeCallback(GLFW.Window windowHandle, bool maximizing)
        {
            if (maximizing)
            {
                _eventBuffer.Add(new EmptyEventArgs(
                    OnWindowMaximized,
                    GetWindow(windowHandle),
                    EventCategory.Window | EventCategory.Maximize,
                    EventType.WindowMaximized));
            }
            else
            {
                _eventBuffer.Add(new EmptyEventArgs(
                    OnWindowRestored,
                    GetWindow(windowHandle),
                    EventCategory.Window | EventCategory.Maximize,
                    EventType.WindowRestored));
            }
        }


        /// <summary>
        /// Callback method for handling window size change events from GLFW.
        /// This method is called by GLFW when a window's size is changed.
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the event.</param>
        /// <param name="width">The new width of the window in screen coordinates.</param>
        /// <param name="height">The new height of the window in screen coordinates.</param>
        private void WindowSizeCallback(GLFW.Window windowHandle, int width, int height) =>
            _eventBuffer.Add(new WindowResizedEventArgs(
                OnWindowResized,
                GetWindow(windowHandle),
                new Size(width, height)));

        /// <summary>
        /// Callback method for handling window position change events from GLFW.
        /// This method is called by GLFW when a window's position is changed.
        /// It adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window that received the event.</param>
        /// <param name="xPos">The new x-coordinate of the top-left corner of the window in screen coordinates.</param>
        /// <param name="yPos">The new y-coordinate of the top-left corner of the window in screen coordinates.</param>
        private void WindowPositionCallback(GLFW.Window windowHandle, int xPos, int yPos) =>
            _eventBuffer.Add(new WindowMovedEventArgs(
                OnWindowMoved,
                GetWindow(windowHandle),
                new Point(xPos, yPos)));

        /// <summary>
        /// Callback method for handling GLFW error events.
        /// This method is called by GLFW when an error occurs.
        /// It extracts the error message from the provided IntPtr and adds the corresponding event arguments to the event buffer for processing.
        /// </summary>
        /// <param name="errorCode">The GLFW error code representing the type of error that occurred.</param>
        /// <param name="message">An IntPtr containing the error message string.</param>
        private void ErrorCallback(ErrorCode errorCode, IntPtr message)
        {
            string errorMessage = Marshal.PtrToStringAnsi(message) ?? "";
            _eventBuffer.Add(new GlfwErrorEventArgs(
                OnGlfwError,
                errorMessage,
                errorCode));
        }

        #endregion

        #region Private methods

        /// <summary>
        /// Executes the events in the event buffer by raising the event and logging it if necessary.
        /// This method processes all the pending events in the event buffer and then clears the buffer.
        /// </summary>
        private void ExecuteEvents()
        {
            // Process the event buffer
            foreach (var currentEvent in _eventBuffer)
            {
                currentEvent.RaiseEvent();
                LogEvent(currentEvent);
            }

            // Clear the event buffer
            _eventBuffer.Clear();
        }

        /// <summary>
        /// Logs the specified event if it belongs to the specified categories to log.
        /// This method checks if the event belongs to the categories specified in the property <see cref="CategoriesToLog"/>.
        /// If the event belongs to one or more of the specified categories, it is logged using the Serilog logger.
        /// </summary>
        /// <param name="currentEvent">The event to log.</param>
        private void LogEvent(EngineEventArgs currentEvent)
        {
            if (CategoriesToLog == EventCategory.None) return;

            if (currentEvent.BelongsToCategory(CategoriesToLog))
            {
                Log.Information("Event [{Type}]: {currentEvent}", currentEvent.Type, currentEvent);
            }
        }

        /// <summary>
        /// Invokes the specified event handler if the event argument type matches.
        /// This generic method simplifies the creation of "On" methods for different event arguments.
        /// If the event argument provided is of type T, the corresponding event handler is invoked with the event argument.
        /// </summary>
        /// <typeparam name="T">The type of the event argument.</typeparam>
        /// <param name="e">The event argument to pass to the event handler.</param>
        /// <param name="eventHandler">The event handler to invoke.</param>
        private void InvokeEvent<T>(EngineEventArgs e, EventHandler<T>? eventHandler)
        {
            // This method will greatly simply the creation of "On" methods
            if (e is T eventArgs) eventHandler?.Invoke(this, eventArgs);
        }

        /// <summary>
        /// Gets the Window instance associated with the specified GLFW window handle.
        /// </summary>
        /// <param name="windowHandle">The handle of the GLFW window.</param>
        /// <returns>The Window instance associated with the GLFW window handle.</returns>
        private Window GetWindow(GLFW.Window windowHandle) =>
            _registeredWindows[windowHandle];

        /// <summary>
        /// Gets the Window instance associated with the specified window handle IntPtr.
        /// </summary>
        /// <param name="windowHandle">The IntPtr representation of the window handle.</param>
        /// <returns>The Window instance associated with the window handle IntPtr.</returns>
        private Window GetWindow(IntPtr windowHandle) =>
            _registeredWindows[new GLFW.Window(windowHandle)];

        #endregion
    }
}